select * from layoffs;

-- 1. check for duplicates and remove any
-- 2. standardize data and fix errors
-- 3. Look at null values and see what 
-- 4. remove any columns and rows that are not necessary - few ways

## removing duplicates

-- I first create a copy of the data table to perform the cleaning, as to not affect the raw data

CREATE TABLE layoffs_staging 
LIKE layoffs;

INSERT layoffs_staging 
SELECT *
 FROM layoffs;

select * 
from layoffs_staging;

SELECT *,
row_number() over(partition by company, industry, 
total_laid_off, percentage_laid_off, `date`) as row_num
from layoffs_staging;

-- I created a cte that would number the rows and give duplicate values the value 2
with duplicate_cte as
(
SELECT *,
row_number() over(partition by company, industry, 
total_laid_off, percentage_laid_off, `date`, stage, 
country, funds_raised_millions) as row_num
from layoffs_staging
)
select * 
from duplicate_cte
where row_num >1;

select *
from layoffs_staging
where company = 'Loft';

-- I then created a second copy of the data table that includes the column row_num from the cte I just created

CREATE TABLE `layoffs_staging2` (
  `company` text,
  `location` text,
  `industry` text,
  `total_laid_off` int DEFAULT NULL,
  `percentage_laid_off` text,
  `date` text,
  `stage` text,
  `country` text,
  `funds_raised_millions` int DEFAULT NULL,
  `row_num` INT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

select *
from layoffs_staging2;

insert into layoffs_staging2
SELECT *,
row_number() over(
partition by company, location,
industry, total_laid_off, percentage_laid_off, `date`, stage
, country, funds_raised_millions) as row_num
from layoffs_staging;

select *
from layoffs_staging2
where row_num > 1;

-- After inserting my CTE into the second copy of the table, 
-- and the duplicate rows all had a 2 assigned to it in the row_num column,
-- I deleted the rows that had a value of 2 in the row_num column

delete
from layoffs_staging2
where row_num > 1;

select *
from layoffs_staging2;

-- Standardizing Data

Select company, trim(company)
from layoffs_staging2;

update layoffs_staging2
set company = trim(company);

select distinct country, trim(trailing '.' from country)
from layoffs_staging2
order by 1;

update layoffs_staging2
set country = trim(trailing '.' from country)
where country like 'United States%';

select `date`,
STR_TO_DATE(`date`, '%m/%d/%Y')
from layoffs_staging2;

-- When importing the data, the date column imported as text, so here 
-- I use the STR_TO_DATE function to alter the format of the date data type, and then
-- applied it to the table

update layoffs_staging2
set `date` = STR_TO_DATE(`date`, '%m/%d/%Y');

alter table layoffs_staging2
modify column `date` DATE;
--



--
update layoffs_staging2
set industry = 'Transportation'
where company = 'Airbnb';

alter table layoffs_staging2
drop column row_num;

select * from layoffs_staging2;

SELECT *
FROM world_layoffs.layoffs_staging2
WHERE total_laid_off IS NULL;


SELECT *
FROM world_layoffs.layoffs_staging2
WHERE total_laid_off IS NULL
AND percentage_laid_off IS NULL;

-- Here I want to clear out rows with null values for both
-- the total laid off AND percentage laid off columns

DELETE FROM world_layoffs.layoffs_staging2
WHERE total_laid_off IS NULL
AND percentage_laid_off IS NULL;

SELECT * 
FROM world_layoffs.layoffs_staging2;

ALTER TABLE layoffs_staging2
DROP COLUMN row_num;


SELECT * 
FROM world_layoffs.layoffs_staging2;







































